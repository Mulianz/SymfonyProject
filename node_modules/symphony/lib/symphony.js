export * from 'emerge'
export * from 'prax'
export * from 'rapt'

export * from './emit'
export * from './render'

import {createPrax} from 'prax'
import {createAuto, createReactiveMethod, createReactiveRender} from './render'

export function createSymphony ({store, Component}) {
  if (!store || typeof store !== 'object' ||
      typeof store.getState !== 'function' ||
      typeof store.subscribe !== 'function') {
    throw Error(`Expected a Redux store or an API-compatible alternative, got: ${store}`)
  }

  const prax = createPrax(store.getState())
  store.subscribe(() => {prax.write(store.getState())})

  const symphony = {
    autorun: prax.autorun,
    stop: prax.stop,
    read: prax.read,
    reactiveMethod: createReactiveMethod(prax),
    reactiveRender: createReactiveRender(prax)
  }

  if (typeof Component === 'function') {
    symphony.auto = createAuto(Component, prax, store.dispatch)
  }

  return symphony
}
