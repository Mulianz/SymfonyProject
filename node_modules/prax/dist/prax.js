'use strict';

var readAtPath = require('emerge').readAtPath;
var deepEqual = require('emerge').deepEqual;
var join = Array.prototype.join;

exports.createPrax = createPrax;
function createPrax(lastState) {
  var funcsByPaths = {};
  var currentPaths = undefined;

  function autorun(func) {
    if (typeof func !== 'function') {
      throw Error('Expected a function, got: ' + func);
    }

    var lastPaths = currentPaths;
    currentPaths = [];

    try {
      func();
      currentPaths.forEach(function (pt) {
        var funcs = funcsByPaths[pt] || (funcsByPaths[pt] = []);
        add(funcs, func);
      });
    } finally {
      currentPaths = lastPaths;
    }

    return func;
  }

  function stop(func) {
    Object.keys(funcsByPaths).forEach(function (key) {
      var funcs = funcsByPaths[key];
      var index = funcs.indexOf(func);
      if (~index) funcs.splice(index, 1);
    });
  }

  function read() {
    if (currentPaths) add(currentPaths, join.call(arguments, '.'));
    return readAtPath(lastState, arguments);
  }

  function write(nextState) {
    var pts = changedPaths(lastState, nextState, Object.keys(funcsByPaths));
    lastState = nextState;
    var funcsToNotify = [];

    pts.forEach(function (pt) {
      var funcs = funcsByPaths[pt];
      if (!funcs) return;
      if (!funcs.length) return delete funcsByPaths[pt];
      funcs.forEach(function (func) {
        add(funcsToNotify, func);
      });
    });

    funcsToNotify.forEach(autorun);
  }

  return { autorun: autorun, stop: stop, read: read, write: write };
}

/**
 * Utils
 */

function add(array, value) {
  if (! ~array.indexOf(value)) array.push(value);
}

function changedPaths(prev, next, pts) {
  return pts.filter(function (pt) {
    if (!pt) return !deepEqual(prev, next);
    var path = pt.split('.');
    return !deepEqual(readAtPath(prev, path), readAtPath(next, path));
  });
}