'use strict';

// Hack to enable interop between duplicate versions of prax.

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var global = new Function('return this')(); // eslint-disable-line
var key = '__prax_current_readers__';
var lowkey = typeof Symbol === 'function' ? Symbol() : (Math.random() * Math.pow(10, 16)).toString(16);

/**
 * Tracking
 */

exports.autorun = autorun;
function autorun(reader) {
  if (typeof reader !== 'function') {
    throw Error('Expected a function, got: ' + reader);
  }

  var last = global[key];
  var current = global[key] = [];

  try {
    stop(reader);
    reader();
    current.forEach(function (readers) {
      add(readers, reader);
    });
    reader[lowkey] = current;
  } finally {
    global[key] = last;
  }

  return reader;
}

exports.stop = stop;
function stop(reader) {
  if (reader && reader[lowkey]) {
    reader[lowkey].splice(0).forEach(function (readers) {
      var index = readers.indexOf(reader);
      if (~index) readers.splice(index, 1);
    });
  }
}

/**
 * Beacon
 */

var Beacon = (function () {
  function Beacon() {
    _classCallCheck(this, Beacon);

    this.readers = [];
  }

  _createClass(Beacon, [{
    key: 'watch',
    value: function watch() {
      if (global[key]) add(global[key], this.readers);
    }
  }, {
    key: 'trigger',
    value: function trigger() {
      this.readers.splice(0).forEach(autorun);
    }
  }]);

  return Beacon;
})();

exports.Beacon = Beacon;

/**
 * Reactive data source
 */

var Source = (function () {
  function Source(value) {
    _classCallCheck(this, Source);

    this.beacon = new Beacon();
    this.value = value;
  }

  _createClass(Source, [{
    key: 'read',
    value: function read() {
      this.beacon.watch();
      return this.value;
    }
  }, {
    key: 'write',
    value: function write(value) {
      this.value = value;
      this.beacon.trigger();
    }
  }]);

  return Source;
})();

exports.Source = Source;

/**
 * Utils
 */

function add(array, value) {
  if (! ~array.indexOf(value)) array.push(value);
}